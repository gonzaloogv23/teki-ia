{"ast":null,"code":"const RespuestaTransformer={transformarRespuesta(respuesta){if(!respuesta||!respuesta.data){return{message:\"\"};}const eventData=respuesta.data.split('\\n');const texto=[];eventData.forEach(event=>{if(event.startsWith('data: ')){const data=event.substring(6).trim();if(data==='[DONE]'){return;}try{if(data.startsWith('{')||data.startsWith('[')){const objetoJson=JSON.parse(data);if(objetoJson.choices&&objetoJson.choices.length>0){objetoJson.choices.forEach(choice=>{if(choice.delta&&choice.delta.content){texto.push(choice.delta.content);}});}}else{console.log('No es un JSON válido:',data);}}catch(error){console.error(\"Error al parsear JSON:\",error);}}});return{message:texto.join(\"\")};}};export default RespuestaTransformer;","map":{"version":3,"names":["RespuestaTransformer","transformarRespuesta","respuesta","data","message","eventData","split","texto","forEach","event","startsWith","substring","trim","objetoJson","JSON","parse","choices","length","choice","delta","content","push","console","log","error","join"],"sources":["C:/Users/Gonza/Desktop/tekiste/frontend/src/components/RespuestaTransformer.js"],"sourcesContent":["const RespuestaTransformer = {\r\n    transformarRespuesta(respuesta) {\r\n      if (!respuesta || !respuesta.data) {\r\n        return { message: \"\" };\r\n      }\r\n  \r\n      const eventData = respuesta.data.split('\\n');\r\n      const texto = [];\r\n      eventData.forEach((event) => {\r\n        if (event.startsWith('data: ')) {\r\n          const data = event.substring(6).trim();\r\n  \r\n          if (data === '[DONE]') {\r\n            return;\r\n          }\r\n  \r\n          try {\r\n            if (data.startsWith('{') || data.startsWith('[')) {\r\n              const objetoJson = JSON.parse(data);\r\n              if (objetoJson.choices && objetoJson.choices.length > 0) {\r\n                objetoJson.choices.forEach((choice) => {\r\n                  if (choice.delta && choice.delta.content) {\r\n                    texto.push(choice.delta.content);\r\n                  }\r\n                });\r\n              }\r\n            } else {\r\n              console.log('No es un JSON válido:', data);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error al parsear JSON:\", error);\r\n          }\r\n        }\r\n      });\r\n      return { message: texto.join(\"\") };\r\n    },\r\n  };\r\n  \r\n  \r\nexport default RespuestaTransformer;\r\n"],"mappings":"AAAA,KAAM,CAAAA,oBAAoB,CAAG,CACzBC,oBAAoBA,CAACC,SAAS,CAAE,CAC9B,GAAI,CAACA,SAAS,EAAI,CAACA,SAAS,CAACC,IAAI,CAAE,CACjC,MAAO,CAAEC,OAAO,CAAE,EAAG,CAAC,CACxB,CAEA,KAAM,CAAAC,SAAS,CAAGH,SAAS,CAACC,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAAC,KAAK,CAAG,EAAE,CAChBF,SAAS,CAACG,OAAO,CAAEC,KAAK,EAAK,CAC3B,GAAIA,KAAK,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAE,CAC9B,KAAM,CAAAP,IAAI,CAAGM,KAAK,CAACE,SAAS,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAEtC,GAAIT,IAAI,GAAK,QAAQ,CAAE,CACrB,OACF,CAEA,GAAI,CACF,GAAIA,IAAI,CAACO,UAAU,CAAC,GAAG,CAAC,EAAIP,IAAI,CAACO,UAAU,CAAC,GAAG,CAAC,CAAE,CAChD,KAAM,CAAAG,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACZ,IAAI,CAAC,CACnC,GAAIU,UAAU,CAACG,OAAO,EAAIH,UAAU,CAACG,OAAO,CAACC,MAAM,CAAG,CAAC,CAAE,CACvDJ,UAAU,CAACG,OAAO,CAACR,OAAO,CAAEU,MAAM,EAAK,CACrC,GAAIA,MAAM,CAACC,KAAK,EAAID,MAAM,CAACC,KAAK,CAACC,OAAO,CAAE,CACxCb,KAAK,CAACc,IAAI,CAACH,MAAM,CAACC,KAAK,CAACC,OAAO,CAAC,CAClC,CACF,CAAC,CAAC,CACJ,CACF,CAAC,IAAM,CACLE,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEpB,IAAI,CAAC,CAC5C,CACF,CAAE,MAAOqB,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACF,CACF,CAAC,CAAC,CACF,MAAO,CAAEpB,OAAO,CAAEG,KAAK,CAACkB,IAAI,CAAC,EAAE,CAAE,CAAC,CACpC,CACF,CAAC,CAGH,cAAe,CAAAzB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}