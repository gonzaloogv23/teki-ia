import React, { useState } from 'react';
import sambanovaService from '../services/SambanovaService';
import './estilosComponentes/chatbot.css';

const ChatComponent = () => {
  const [mensaje, setMensaje] = useState('');
  const [respuesta, setRespuesta] = useState('');
  const [mensajes, setMensajes] = useState([]);
  const [primeraLlamada, setPrimeraLlamada] = useState(true);

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const respuestaApi = await obtenerRespuesta(mensaje);
      console.log("respuesta de la api:", respuestaApi);
  
      if (respuestaApi) {
        setRespuesta(respuestaApi);
        setMensajes([...mensajes, { texto: mensaje, tipo: 'enviado' }, { texto: respuestaApi, tipo: 'recibido' }]);
      } else {
        setRespuesta("No se pudo obtener una respuesta adecuada.");
        setMensajes([...mensajes, { texto: mensaje, tipo: 'enviado' }, { texto: "No se pudo obtener una respuesta adecuada.", tipo: 'recibido' }]);
      }
    } catch (error) {
      console.error("Error al obtener la respuesta", error);
      setRespuesta("Error al obtener la respuesta");
      setMensajes([...mensajes, { texto: mensaje, tipo: 'enviado' }, { texto: "Error al obtener la respuesta", tipo: 'recibido' }]);
    }
    setMensaje('');
  };

  const handleKeyPress = (event) => {
    if (event.key === 'Enter') {
      handleSubmit(event);
    }
  };

  const efectoPigmalion = (mensaje) => {
    if (mensaje.includes('gracias') || mensaje.includes('agradecido')) {
      return 'Me alegra que est√©s agradecido! ';
    } else if (mensaje.includes('problema') || mensaje.includes('error')) {
      return 'Lo siento, ¬øen qu√© puedo ayudarte? ';
    } else {
      return '';
    }
  };

  const tipsRelacionarse = (mensaje) => {
    if (mensaje.includes('hola') || mensaje.includes('buenos d√≠as')) {
      return 'Recuerda que la primera impresi√≥n es importante. ¬°Sonr√≠e y s√© amable! ';
    } else if (mensaje.includes('adi√≥s') || mensaje.includes('hasta luego')) {
      return 'Recuerda que la despedida es tan importante como el saludo. ¬°S√© educado y agradecido! ';
    } else {
      return '';
    }
  };

  const agregarEmojis = (mensaje) => {
    const emojis = {
      'hola': ' üòäüëãüíõ',
      'buenos d√≠as': ' üòäüëãüíõ',
      'gracias': ' üôèüíïüòä',
      'agradecido': ' üôèüíïüòä',
      'problema': ' ü§îüò¨üö´',
      'error': ' ü§îüò¨üö´',
      'adi√≥s': ' üëãüö™üëç',
      'hasta luego': ' üëãüö™üëç',
      'feliz': ' üòäüéâüéä',
      'alegre': ' üòäüéâüéä',
      'triste': ' üòîüò¢ü§ï',
      'sad': ' üòîüò¢ü§ï',
      'enfadado': ' üò†üò°üî•',
      'enojado': ' üò†üò°üî•',
      'sorprendido': ' üòÆüò≤ü§Ø',
      'asombrado': ' üòÆüò≤ü§Ø',
      'amor': ' ‚ù§Ô∏èüíïüòò',
      'amoroso': ' ‚ù§Ô∏èüíïüòò',
      'cumplea√±os': ' üéÇüéÅüéâ',
      'feliz cumplea√±os': ' üéÇüéÅüéâ',
      'divertido': ' üòÑüéâüëç',
      'entretenido': ' üòÑüéâüëç',
      'aburrido': ' üòíüò¥üëé',
      'desinteresado': ' üòíüò¥üëé',
      'emocionado': ' üòÜüéâüî•',
      'entusiasmado': ' üòÜüéâüî•',
      'relajado': ' üòåüåüüëå',
      'tranquilo': ' üòåüåüüëå',
      'estresado': ' üò©üò¨üï∞Ô∏è',
      'ansioso': ' üò©üò¨üï∞Ô∏è',
      'satisfecho': ' üòäüëåüíØ',
      'contento': ' üòäüëåüíØ',
      'insatisfecho': ' üòêüòíüëé',
      'descontento': ' üòêüòíüëé',
      'sorprendente': ' üòÆü§Øüî•',
      'incre√≠ble': ' üòÆü§Øüî•',
      'normal': ' üòêüëåüî¥',
      'com√∫n': ' üòêüëåüî¥',
      'extra√±o': ' üòïü§îüîÆ',
      'raro': ' üòïü§îüîÆ'
    };

    const palabras = Object.keys(emojis);
    for (const palabra of palabras) {
      if (mensaje.includes(palabra)) {
        return mensaje + emojis[palabra];
      }
    }
    return mensaje + ' ';
  };

  const obtenerRespuesta = async (mensaje) => {
    let textoEnviar = mensaje;
    if (primeraLlamada) {
      textoEnviar = `Tu nombre es Teki, una llama joven que est√° aqu√≠ para ayudarte. ${mensaje}`;
      setPrimeraLlamada(false);
    }
    const respuesta = await sambanovaService.obtenerRespuesta(textoEnviar);
    const efectoPigmalionTexto = efectoPigmalion(mensaje);
    const tipsRelacionarseTexto = tipsRelacionarse(mensaje);
    const respuestaConEmojis = agregarEmojis(`${efectoPigmalionTexto} ${respuesta.message} ${tipsRelacionarseTexto}`);
    return respuestaConEmojis;
  };

  return (
    <div className="card">
      <div className="chat-header">Teki v1</div>
      <div className="chat-window">
        <ul className="message-list">
          {mensajes.map((mensaje, index) => (
            <li key={index} className={mensaje.tipo === 'enviado' ? 'mensaje-enviado' : 'mensaje-recibido'}>
              {mensaje.texto}
            </li>
          ))}
        </ul>
      </div>
      <div className="chat-input">
        <input
          type="text"
          className="message-input"
          placeholder="Escribe tu mensaje aqu√≠"
          value={mensaje}
          onChange={(event) => setMensaje(event.target.value)}
          onKeyPress={handleKeyPress}
        />
        <button className="send-button" onClick={handleSubmit}>
          Enviar
        </button>
      </div>
    </div>
  );
};

export default ChatComponent;
